(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8945],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4327:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),s=["components"],i={sidebar_position:3},l="Setting Up Environment",c={unversionedId:"getting-started/setting-env",id:"version-0.16/getting-started/setting-env",isDocsHomePage:!1,title:"Setting Up Environment",description:"You need an environment to run contracts. You can either run your node locally or connect to an existing network. For",source:"@site/docs_versioned_docs/version-0.16/02-getting-started/03-setting-env.md",sourceDirName:"02-getting-started",slug:"/getting-started/setting-env",permalink:"/docs/0.16/getting-started/setting-env",editUrl:"https://github.com/InterWasm/docs/edit/main/docs_versioned_docs/version-0.16/02-getting-started/03-setting-env.md",tags:[],version:"0.16",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"version-0.16/docsSidebar",previous:{title:"Installation",permalink:"/docs/0.16/getting-started/installation"},next:{title:"Downloading and Compiling Contract",permalink:"/docs/0.16/getting-started/compile-contract"}},d=[{value:"Setup Go CLI",id:"setup-go-cli",children:[]},{value:"Export wasmd Parameters",id:"export-wasmd-parameters",children:[]},{value:"Run Local Node (optional)",id:"run-local-node-optional",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-environment"},"Setting Up Environment"),(0,r.kt)("p",null,"You need an environment to run contracts. You can either run your node locally or connect to an existing network. For\neasy testing, pebblenet network is online, you can use it to deploy and run your contracts."),(0,r.kt)("p",null,"To verify testnet is currently running, make sure the following URLs are all working for you:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://rpc.pebblenet.cosmwasm.com/status"},"https://rpc.pebblenet.cosmwasm.com/status")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.pebblenet.cosmwasm.com/status"},"https://faucet.pebblenet.cosmwasm.com/status")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://lcd.pebblenet.cosmwasm.com/node_info"},"https://lcd.pebblenet.cosmwasm.com/node_info"))),(0,r.kt)("p",null,"Available frontends:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Block Explorer: ",(0,r.kt)("a",{parentName:"li",href:"https://block-explorer.pebblenet.cosmwasm.com"},"https://block-explorer.pebblenet.cosmwasm.com"))),(0,r.kt)("p",null,"You can use these to explore txs, addresses, validators and contracts feel free to deploy one pointing to our rpc/lcd\nservers and we will list it."),(0,r.kt)("p",null,"You can find more information about other testnets:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/testnets"},"CosmWasm/testnets")," and ",(0,r.kt)("a",{parentName:"p",href:"/ecosystem/testnets/testnets"},"Testnet section"),"."),(0,r.kt)("p",null,"When interacting with network, you can either use ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmd")," which is a Go client or Node REPL. Although Node REPL is\nrecommended for contract operations, since JSON manipulation is not intuitive with the Shell/Go client."),(0,r.kt)("h2",{id:"setup-go-cli"},"Setup Go CLI"),(0,r.kt)("p",null,"Let's configure ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmd")," exec, point it to testnets, create wallet and ask tokens from faucet:"),(0,r.kt)("p",null,"First source the pebblenet network configurations to the shell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"source <(curl -sSL https://raw.githubusercontent.com/CosmWasm/testnets/master/pebblenet-1/defaults.env)\n")),(0,r.kt)("p",null,"Setup the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# add wallets for testing\nwasmd keys add wallet\n>\n{\n  "name": "wallet",\n  "type": "local",\n  "address": "wasm13nt9rxj7v2ly096hm8qsyfjzg5pr7vn5saqd50",\n  "pubkey": "wasmpub1addwnpepqf4n9afaefugnfztg7udk50duwr4n8p7pwcjlm9tuumtlux5vud6qvfgp9g",\n  "mnemonic": "hobby bunker rotate piano satoshi planet network verify else market spring toward pledge turkey tip slim word jaguar congress thumb flag project chalk inspire"\n}\n\nwasmd keys add wallet2\n')),(0,r.kt)("p",null,"You need some tokens in your address to interact. If you are using local node you can skip this step. Requesting tokens\nfrom faucet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'JSON=$(jq -n --arg addr $(wasmd keys show -a wallet) \'{"denom":"upebble","address":$addr}\') && curl -X POST --header "Content-Type: application/json" --data "$JSON" https://faucet.pebblenet.cosmwasm.com/credit\nJSON=$(jq -n --arg addr $(wasmd keys show -a wallet2) \'{"denom":"upebble","address":$addr}\') && curl -X POST --header\n"Content-Type: application/json" --data "$JSON" https://faucet.pebblenet.cosmwasm.com/credit\n')),(0,r.kt)("h2",{id:"export-wasmd-parameters"},"Export wasmd Parameters"),(0,r.kt)("p",null,"If you intend to use wasmd as client, we recommend you to setup these variables. Otherwise You will have to define type\nin node, chain id and gas-prices details with every command you execute. Also for this tutorial we will use these\nvariables. So make sure you export these before proceeding."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# bash\nexport NODE="--node $RPC"\nexport TXFLAG="${NODE} --chain-id ${CHAIN_ID} --gas-prices 0.001upebble --gas auto --gas-adjustment 1.3"\n\n# if your shell is zsh follow these\n# zsh\nexport NODE=(--node $RPC)\nexport TXFLAG=($NODE --chain-id $CHAIN_ID --gas-prices 0.001upebble --gas auto --gas-adjustment 1.3)\n')),(0,r.kt)("h2",{id:"run-local-node-optional"},"Run Local Node (optional)"),(0,r.kt)("p",null,"This is not required and for those who want extra challenge.\nYou can set up a local node for yourself, but we recommend sticking to testnet.\nScript down below will setup a local network:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# default home is ~/.wasmd\n# if you want to setup multiple apps on your local make sure to change this value\nAPP_HOME="~/.wasmd"\nRPC="http://localhost:26657"\nCHAIN_ID="localnet"\n# initialize wasmd configuration files\nwasmd init localnet --chain-id ${CHAIN_ID} --home ${APP_HOME}\n\n# add minimum gas prices config to app configuration file\nsed -i -r \'s/minimum-gas-prices = ""/minimum-gas-prices = "0.01ucosm"/\' ${APP_HOME}/config/app.toml\n\n# Create main address\n# --keyring-backend test is for testing purposes\n# Change it to --keyring-backend file for secure usage.\nexport KEYRING="--keyring-backend test --keyring-dir $HOME/.wasmd_keys"\nwasmd keys add main $KEYRING\n\n# create validator address\nwasmd keys add validator $KEYRING\n\n# add your wallet addresses to genesis\nwasmd add-genesis-account $(wasmd keys show -a main $KEYRING) 10000000000ucosm,10000000000stake --home ${APP_HOME}\nwasmd add-genesis-account $(wasmd keys show -a validator $KEYRING) 10000000000ucosm,10000000000stake --home ${APP_HOME}\n\n# add fred\'s address as validator\'s address\nwasmd gentx validator 1000000000stake --home ${APP_HOME} --chain-id ${CHAIN_ID} $KEYRING\n\n# collect gentxs to genesis\nwasmd collect-gentxs --home ${APP_HOME}\n\n# validate the genesis file\nwasmd validate-genesis --home ${APP_HOME}\n\n# run the node\nwasmd start --home ${APP_HOME}\n')))}p.isMDXComponent=!0}}]);