(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9879],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:e},l),{},{components:n})):r.createElement(f,i({ref:e},l))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9205:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},c="Simple State",p={unversionedId:"smart-contracts/components/state/simple-state",id:"smart-contracts/components/state/simple-state",isDocsHomePage:!1,title:"Simple State",description:"State is where the smart contract works with saving and retrieving data. You can think of it much like a database interaction layer in a traditional application.",source:"@site/docs/04-smart-contracts/02-components/03-state/01-simple-state.md",sourceDirName:"04-smart-contracts/02-components/03-state",slug:"/smart-contracts/components/state/simple-state",permalink:"/docs/1.0/smart-contracts/components/state/simple-state",editUrl:"https://github.com/CosmWasm/docs/edit/main/docs/04-smart-contracts/02-components/03-state/01-simple-state.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Result and Option",permalink:"/docs/1.0/smart-contracts/components/result-option"},next:{title:"Complex State and Maps",permalink:"/docs/1.0/smart-contracts/components/state/complex-state"}},l=[],m={toc:l};function u(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simple-state"},"Simple State"),(0,o.kt)("p",null,"State is where the smart contract works with saving and retrieving data. You can think of it much like a database interaction layer in a traditional application."),(0,o.kt)("p",null,"The most simple way of writing state is by writing a single item."),(0,o.kt)("p",null,"For example, in the ",(0,o.kt)("inlineCode",{parentName:"p"},"cw20-base")," contract, ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenInfo")," is written when the contract is instantiated."),(0,o.kt)("p",null,"First, a ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenInfo")," type is declared in ",(0,o.kt)("inlineCode",{parentName:"p"},"state.rs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]\n#[serde(rename_all = "snake_case")]\npub struct TokenInfo {\n    pub name: String,\n    pub symbol: String,\n    pub decimals: u8,\n    pub total_supply: Uint128,\n    pub mint: Option<MinterData>,\n}\n')),(0,o.kt)("p",null,"Then the storage is initialized:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub const TOKEN_INFO: Item<TokenInfo> = Item::new("token_info");\n')),(0,o.kt)("p",null,"In the contract, we see in the ",(0,o.kt)("inlineCode",{parentName:"p"},"instantiate")," function how data can be saved to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let data = TokenInfo {\n    name: msg.name,\n    symbol: msg.symbol,\n    decimals: msg.decimals,\n    total_supply,\n    mint,\n};\nTOKEN_INFO.save(deps.storage, &data)?;\n")),(0,o.kt)("p",null,"Here's the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/blob/main/contracts/cw20-base/src/contract.rs#L90"},"code context"),"."))}u.isMDXComponent=!0}}]);