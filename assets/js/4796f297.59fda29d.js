(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5101],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3370:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),s=["components"],c={sidebar_position:5},i="Query",u={unversionedId:"smart-contracts/components/query",id:"smart-contracts/components/query",isDocsHomePage:!1,title:"Query",description:"Querying is the other half of the coin to messages. You can think of queries as a database read, or a way of querying state.",source:"@site/docs/04-smart-contracts/02-components/05-query.md",sourceDirName:"04-smart-contracts/02-components",slug:"/smart-contracts/components/query",permalink:"/docs/1.0/smart-contracts/components/query",editUrl:"https://github.com/CosmWasm/docs/edit/main/docs/04-smart-contracts/02-components/05-query.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Entry points",permalink:"/docs/1.0/smart-contracts/components/entry-points"},next:{title:"Events",permalink:"/docs/1.0/smart-contracts/components/events"}},l=[],p={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query"},"Query"),(0,a.kt)("p",null,"Querying is the other half of the coin to messages. You can think of queries as a database read, or a way of querying state."),(0,a.kt)("p",null,"Generally you will find the available query messages in ",(0,a.kt)("inlineCode",{parentName:"p"},"msg.rs")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"query.rs"),", depending on how the contract author has structured the code."),(0,a.kt)("p",null,"You can query via an external client (over API or via CLI), or an internal client (within a contract, to another contract). Some of the finer details of how this works can be found in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0/architecture/query"},"Querying Architecture section"),"."),(0,a.kt)("p",null,"Most queries you use will be custom queries. These access the contract's data store in read-only mode. These queries can look up data and perform additional computation or processing as needed. As a result, a gas limit is enforced on these queries."),(0,a.kt)("p",null,"Custom queries consist of an entry in the ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryMsg")," enum, and are handled in the contract's ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum QueryMsg {\n    // ResolveAddress returns the current address that the name resolves to\n    ResolveRecord { name: String },\n    Config {},\n}\n')),(0,a.kt)("p",null,"You can find the code for this example in context ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-examples/blob/main/contracts/nameservice/src/msg.rs#L20"},"here"),"."),(0,a.kt)("p",null,"The contract then handles this in the ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg_attr(not(feature = "library"), entry_point)]\npub fn query(deps: Deps, env: Env, msg: QueryMsg) -> StdResult<Binary> {\n    match msg {\n        QueryMsg::ResolveRecord { name } => query_resolver(deps, env, name),\n        QueryMsg::Config {} => to_binary(&config_read(deps.storage).load()?),\n    }\n}\n')),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"query_resolver")," is just another function, and ",(0,a.kt)("inlineCode",{parentName:"p"},"config_read")," is a helper that wraps access to the data store."),(0,a.kt)("p",null,"The custom queries are exposed via ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-examples/blob/main/contracts/nameservice/src/contract.rs#L95"},"the query function"),"."))}m.isMDXComponent=!0}}]);