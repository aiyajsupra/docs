(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1847],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=s(t),u=i,c=k["".concat(m,".").concat(u)]||k[u]||p[u]||r;return t?a.createElement(c,l(l({ref:n},d),{},{components:t})):a.createElement(c,l({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=k;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},4467:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return s},toc:function(){return d},default:function(){return k}});var a=t(2122),i=t(9756),r=(t(7294),t(3905)),l=["components"],o={sidebar_position:8},m=void 0,s={unversionedId:"CHANGELOG",id:"version-0.16/CHANGELOG",isDocsHomePage:!1,title:"CHANGELOG",description:"[0.15.2] - 2021-07-21",source:"@site/docs_versioned_docs/version-0.16/08-CHANGELOG.md",sourceDirName:".",slug:"/CHANGELOG",permalink:"/fr/docs/0.16/CHANGELOG",editUrl:"https://github.com/CosmWasm/docs/edit/main/docs_versioned_docs/version-0.16/08-CHANGELOG.md",version:"0.16",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"version-0.16/docsSidebar",previous:{title:"Migrating Contracts",permalink:"/fr/docs/0.16/MIGRATING"}},d=[{value:"0.15.2 - 2021-07-21",id:"0152---2021-07-21",children:[{value:"Fixed",id:"fixed",children:[]}]},{value:"0.15.1 - 2021-07-20",id:"0151---2021-07-20",children:[{value:"Fixed",id:"fixed-1",children:[]}]},{value:"0.15.0 - 2021-06-24",id:"0150---2021-06-24",children:[{value:"Added",id:"added",children:[]},{value:"Removed",id:"removed",children:[]},{value:"Changed",id:"changed",children:[]},{value:"Fixed",id:"fixed-2",children:[]}]},{value:"0.14.1 - 2021-06-14",id:"0141---2021-06-14",children:[{value:"Added",id:"added-1",children:[]},{value:"Fixed",id:"fixed-3",children:[]}]},{value:"0.14.0 - 2021-05-03",id:"0140---2021-05-03",children:[{value:"Added",id:"added",children:[]},{value:"Changed",id:"changed",children:[]},{value:"Deprecated",id:"deprecated",children:[]}]},{value:"0.13.2 - 2021-01-14",id:"0132---2021-01-14",children:[]},{value:"Changed",id:"changed-1",children:[]},{value:"0.13.1 - 2021-01-12",id:"0131---2021-01-12",children:[{value:"Added",id:"added-1",children:[]}]},{value:"0.13.0 \u2013 2021-01-06",id:"0130--2021-01-06",children:[]},{value:"Added",id:"added-2",children:[]},{value:"Changed",id:"changed-2",children:[]},{value:"0.12.1 (2020-12-09)",id:"0121-2020-12-09",children:[]},{value:"0.12.0 (2020-11-19)",id:"0120-2020-11-19",children:[]},{value:"0.11.2 (2020-10-26)",id:"0112-2020-10-26",children:[]},{value:"0.11.1 (2020-10-12)",id:"0111-2020-10-12",children:[]},{value:"0.11.0 (2020-10-08)",id:"0110-2020-10-08",children:[]},{value:"0.10.1 (2020-08-25)",id:"0101-2020-08-25",children:[]},{value:"0.10.0 (2020-07-30)",id:"0100-2020-07-30",children:[]},{value:"0.9.4 (2020-07-16)",id:"094-2020-07-16",children:[]},{value:"0.9.3 (2020-07-08)",id:"093-2020-07-08",children:[]},{value:"0.9.2 (2020-06-29)",id:"092-2020-06-29",children:[]},{value:"0.9.1 (2020-06-25)",id:"091-2020-06-25",children:[]},{value:"0.9.0 (2020-06-25)",id:"090-2020-06-25",children:[]},{value:"0.8.1 (2020-06-08)",id:"081-2020-06-08",children:[]},{value:"0.8.0 (2020-05-25)",id:"080-2020-05-25",children:[]},{value:"0.7.2 (2020-03-23)",id:"072-2020-03-23",children:[]},{value:"0.7.1 (2020-03-11)",id:"071-2020-03-11",children:[]},{value:"0.7.0 (2020-02-26)",id:"070-2020-02-26",children:[]},{value:"0.6",id:"06",children:[]},{value:"0.5",id:"05",children:[{value:"0.5.2",id:"052",children:[]}]}],p={toc:d};function k(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"0152---2021-07-21"},"[0.15.2]"," - 2021-07-21"),(0,r.kt)("h3",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Export ",(0,r.kt)("inlineCode",{parentName:"li"},"VoteOption")," as a top-level type.")),(0,r.kt)("h2",{id:"0151---2021-07-20"},"[0.15.1]"," - 2021-07-20"),(0,r.kt)("h3",{id:"fixed-1"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Export ",(0,r.kt)("inlineCode",{parentName:"li"},"GovMsg")," as a top-level type of the crate.")),(0,r.kt)("h2",{id:"0150---2021-06-24"},"[0.15.0]"," - 2021-06-24"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Sub")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SubAssign")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement custom events for contract execution results"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Gov")," for voting on governance proposals."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-storage: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage"),". NOTE: Calling ",(0,r.kt)("inlineCode",{parentName:"li"},"set")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"remove")," on\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage")," will panic!")),(0,r.kt)("h3",{id:"removed"},"Removed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Make ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," inner field private (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/905"},"#905"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," - deprecated in previous release"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse")," -\ndeprecated in previous release"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-crypto: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"ed25519::MESSAGE_MAX_LEN"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ed25519::BATCH_MAX_LEN"),"\nand message length verification as this should not be a concern of\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-crypto"),".")),(0,r.kt)("h3",{id:"changed"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename the ",(0,r.kt)("inlineCode",{parentName:"li"},"send")," function parameter to ",(0,r.kt)("inlineCode",{parentName:"li"},"funds")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg")," for\nconsistency with the wasmd message types."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Increase read limit of contract execution results from 100,000\nbytes to 64 MiB. JSON deserializers should have their own limit to protect\nagainst large deserializations."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Create ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::DeserializationLimitExceeded"),"; Add limit\nargument to ",(0,r.kt)("inlineCode",{parentName:"li"},"from_slice"),"; Increase deserialization limit of contract execution\nresults from 100,000 bytes to 256 KiB. This probably only affects internal\ntesting as well as integration tests of smart contracts."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: More accurate error messages for op codes related to bulk memory\noperations, reference types, SIMD and the Threads extension."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Update ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmer")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"2.0.0")),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: ED25519 message length and batch length limits are now hardcoded\nin ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-vm")," itself instead of being imported from ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-crypto"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Filesystem storage layout now distinguishes clearly between state\nand cache."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add enum case ",(0,r.kt)("inlineCode",{parentName:"li"},"ReplyOn::Never"),"; Remove default implementation of\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReplyOn")," as there is no natural default case anymore (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/961"},"#961"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Merge ",(0,r.kt)("inlineCode",{parentName:"li"},"messages")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"submessages")," into one list, using\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReplyOn::Never"),' to model the "fire and forget" semantics (',(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/961"},"#961"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"SubMsg")," constructors: ",(0,r.kt)("inlineCode",{parentName:"li"},"::new()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"::reply_on_error()"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"::reply_on_success()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"::reply_always()"),"; Add ",(0,r.kt)("inlineCode",{parentName:"li"},"with_gas_limit")," to add a gas\nlimit to any those constructors (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/961"},"#961"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Change ",(0,r.kt)("inlineCode",{parentName:"li"},"Event"),"'s constructor - it no longer takes a vector of\nattributes and instead constructs an empty one"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Event.kind")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Event.ty"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"SubcallResponse")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"SubMsgExecutionResponse"),"."),(0,r.kt)("li",{parentName:"ul"},"contracts: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"ReflectSubCall")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"ReflectSubMsg")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SubCallResult")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"SubCallMsg")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"reflect")," contract."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename the ",(0,r.kt)("inlineCode",{parentName:"li"},"subcall")," module to ",(0,r.kt)("inlineCode",{parentName:"li"},"submessages"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Bump required marker export ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_5")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"interface_version_6"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"IbcAcknowledgement")," is renamed to\n",(0,r.kt)("inlineCode",{parentName:"li"},"IbcAcknowledgementWithPacket")," as it contains both data elements. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/975"},"#975"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"IbcAcknowledgementWithPacket.acknowledgement")," is no longer\nsimply ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary"),", but a new ",(0,r.kt)("inlineCode",{parentName:"li"},"IbcAcknowledgement")," structure, which contains one\nfield - ",(0,r.kt)("inlineCode",{parentName:"li"},"data: Binary"),". This change was made to allow us to handle future\nchanges to IBC in a non-contract-breaking way. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/975"},"#975"),")")),(0,r.kt)("h3",{id:"fixed-2"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"comswasm-vm: Whitelisted the ",(0,r.kt)("inlineCode",{parentName:"li"},"i64.extend32_s")," operation.")),(0,r.kt)("h2",{id:"0141---2021-06-14"},"[0.14.1]"," - 2021-06-14"),(0,r.kt)("h3",{id:"added-1"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Timestamp::minus_seconds")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"::minus_nanos"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr::as_bytes")),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"std::ops::Sub")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"math::Decimal")),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Timestamp::seconds")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Timestamp::subsec_nanos"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement division for ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal / Uint128")),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"math::Decimal::sqrt"))),(0,r.kt)("h3",{id:"fixed-3"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Fix ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint64::multiply_ratio")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128::multiply_ratio")," so\nthat internal multiplication cannot cause an unnecessary overflow. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/920"},"#920"),")")),(0,r.kt)("h2",{id:"0140---2021-05-03"},"[0.14.0]"," - 2021-05-03"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-crypto: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"ed25519_batch_verify"),", EdDSA ed25519 batch signature verification scheme for Tendermint\nsignatures and public keys formats.\n(","[#788]",")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-crypto: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"ed25519_verify"),", EdDSA ed25519 signature verification scheme for Tendermint signature and public\nkey formats. (","[#771]",")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-crypto: New crypto-related crate. Add ",(0,r.kt)("inlineCode",{parentName:"li"},"secp256k1_verify"),", ECDSA secp256k1 signature verification scheme for\nCosmos signature and public key formats. (","[#780]",")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Add PinnedMemoryCache. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/696"},"#696"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: The new ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache::analyze")," provides a static analyzis of the Wasm bytecode. This is used to tell the caller\nif the contract exposes IBC entry points. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/736"},"#736"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate")," feature flag to enable new stargate and ibc features (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/716"},"#716"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: (requires ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate"),") call into 6 new ibc entry points if exposed by contract (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/716"},"#716"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate")," feature flag to enable new stargate and ibc features (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/706"},"#706"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: (requires ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate"),") Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Stargate")," message type to dispatch protobuf-encoded\nmessage (contract must know proto schema)\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/706"},"#706"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: (requires ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate"),") Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryRequest::Stargate")," message type to dispatch protobuf-encoded\nqueries (contract must know proto schema for request and response) (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/706"},"#706"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: (requires ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate"),") Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Ibc(IbcMsg)")," message type to use ibctransfer app or send raw\nics packets (if contract has ibc entry points) (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/710"},"#710"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add mutable helper methods to ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse")," which make ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," obsolete."),(0,r.kt)("li",{parentName:"ul"},"contracts: added new ",(0,r.kt)("inlineCode",{parentName:"li"},"ibc-reflect")," contract that receives channels and assigns each an account to redispatch. Similar\nidea to ICS27/Interchain Accounts (but different implementation) (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/711"},"#711"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/714"},"#714"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg::Migrate")," variant that allows one contract\n(eg. multisig) be the admin and migrate another contract (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/768"},"#768"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added optional ",(0,r.kt)("inlineCode",{parentName:"li"},"system")," entry point that can only be called by native (blockchain) modules to expose\nadmin functionality if desired. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/793"},"#793"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add extra field ",(0,r.kt)("inlineCode",{parentName:"li"},"submessages")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Response"),", such that you can get a callback from these messages after\ntheir execution (success or failure).\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/796"},"#796"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added ",(0,r.kt)("inlineCode",{parentName:"li"},"reply"),' entry point that will receive all callbacks from submessages dispatched by this contract.\nThis is only required if contract returns "submessages" (above). (',(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/796"},"#796"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Uint128> for String"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Uint128> for u128"),"\nas well as ",(0,r.kt)("inlineCode",{parentName:"li"},"From<u{32,16,8}> for Uint128"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Create new address type ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr"),". This is human readable (like\n",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr"),") but is immutable and always contains a valid address (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Add import ",(0,r.kt)("inlineCode",{parentName:"li"},"addr_validate")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"BankMsg::Burn")," variant when you want the tokens to disappear (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/860"},"#860"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Create ",(0,r.kt)("inlineCode",{parentName:"li"},"Fraction<T>")," trait to represent a fraction ",(0,r.kt)("inlineCode",{parentName:"li"},"p"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"q")," with integers ",(0,r.kt)("inlineCode",{parentName:"li"},"p")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"q"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal")," now\nimplements ",(0,r.kt)("inlineCode",{parentName:"li"},"Fraction<u128>"),", which provides public getters ",(0,r.kt)("inlineCode",{parentName:"li"},"::numerator()")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"::denominator()"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal::inv")," that returns ",(0,r.kt)("inlineCode",{parentName:"li"},"1/d")," for decimal ",(0,r.kt)("inlineCode",{parentName:"li"},"d"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache::metrics")," to expose internal data for monitoring purposes (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/763"},"#763"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"PartialOrd")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ord")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," using the same lexicographical ordering as implemented\nby ",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<u8>"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"PartialOrd")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ord")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr")," using the same lexicographical ordering as implemented\nby ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg::UpdateAdmin")," variant that allows an admin contract (eg. multisig) to set another\nadmin (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/900"},"#900"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Added new ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg::ClearAdmin")," variant that allows an admin contract (eg. multisig) to clear the admin,\nto prevent future migrations\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/900"},"#900"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Display for Coin")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/901"},"#901"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Create ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint64")," analogously to ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," with string serialization allowing the use of the full uint64\nrange in JSON clients that use float numbers, such as JavaScript and jq."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Create const functions ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint64::new")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128::new")," to create instances in a const context.")),(0,r.kt)("h3",{id:"changed"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"contracts: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleMsg")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteMsg"),"."),(0,r.kt)("li",{parentName:"ul"},"all: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"handle")," entry point to ",(0,r.kt)("inlineCode",{parentName:"li"},"execute"),"."),(0,r.kt)("li",{parentName:"ul"},"all: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"init")," entry point to ",(0,r.kt)("inlineCode",{parentName:"li"},"instantiate"),"."),(0,r.kt)("li",{parentName:"ul"},"all: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"system")," entry point to ",(0,r.kt)("inlineCode",{parentName:"li"},"sudo"),"."),(0,r.kt)("li",{parentName:"ul"},"all: Drop support for Rust versions lower than 1.51.0."),(0,r.kt)("li",{parentName:"ul"},"all: The ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"execute")," entry points are now optional. It is still highly recommended to implement and expose\nthem in almost any use case though."),(0,r.kt)("li",{parentName:"ul"},"all: Change the encoding of the key/value region of the ",(0,r.kt)("inlineCode",{parentName:"li"},"db_next")," import to a more generic encoding that supports an\narbitrary number of sections. This encoding can then be reused for other multi value regions."),(0,r.kt)("li",{parentName:"ul"},"all: Remove the ",(0,r.kt)("inlineCode",{parentName:"li"},"info: MessageInfo")," argument from the ",(0,r.kt)("inlineCode",{parentName:"li"},"migrate")," entry point\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/690"},"#690"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"from_address")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"BankMsg::Send"),", as it always sends from the contract address, and this is\nconsistent with other ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg"),"\nvariants."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove the previously deprecated ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResult"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResult"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResult")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryResult")," in order to make error type explicit and encourage migration to custom errors."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add a ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," field to ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse")," the same way as in\n",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo::sent_funds")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo::funds"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Merge response types ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse")," into the new ",(0,r.kt)("inlineCode",{parentName:"li"},"Response"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Default")," implementation from ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractInfo"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"BlockInfo")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Env"),". If you need one of those, you're probably doing\nsomething wrong."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Make ",(0,r.kt)("inlineCode",{parentName:"li"},"label")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg::Instantiate")," non-optional to better match the Go/database format."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add new field ",(0,r.kt)("inlineCode",{parentName:"li"},"admin")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg::Instantiate")," to fully support\n",(0,r.kt)("inlineCode",{parentName:"li"},"MsgInstantiateContract")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"x/wasm")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/861"},"#861"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary::to_array")," is now generic over the array length instead of the output type. As a consequence the\nobsolete type ",(0,r.kt)("inlineCode",{parentName:"li"},"ByteArray")," was removed. The array length is not restricted to 0-64 anymore."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Use const generics to implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<&[u8; LENGTH]> for Binary"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"From<[u8; LENGTH]> for Binary"),", such that the array length is not restricted to 0-64 anymore."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Avoid serialization of Modules in ",(0,r.kt)("inlineCode",{parentName:"li"},"InMemoryCache"),", for performance. Also, remove ",(0,r.kt)("inlineCode",{parentName:"li"},"memory_limit"),"\nfrom ",(0,r.kt)("inlineCode",{parentName:"li"},"InstanceOptions"),", and define it instead at ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache")," level (same memory limit for all cached instances).\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/697"},"#697"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename type ",(0,r.kt)("inlineCode",{parentName:"li"},"KV")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Pair")," in order to comply to naming convention as enforced by clippy\nrule ",(0,r.kt)("inlineCode",{parentName:"li"},"upper_case_acronyms")," from Rust 1.51.0 on."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractInfo::address")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo::sender")," are now of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr"),". The value of those fields is\ncreated by the host and thus valid."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Bump required marker export ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_4")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"interface_version_5"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Rename trait ",(0,r.kt)("inlineCode",{parentName:"li"},"Api")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"BackendApi")," to better express this is the API provided by the VM's backend (i.e.\nthe blockchain)."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Rename imports to ",(0,r.kt)("inlineCode",{parentName:"li"},"addr_canonicalize")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"addr_humanize"),"\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Replace types ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr")," with\n",(0,r.kt)("inlineCode",{parentName:"li"},"&str"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"String"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"&[u8]"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<u8>")," in the methods of ",(0,r.kt)("inlineCode",{parentName:"li"},"BackendApi"),". The address types belong in the contract development\nand the backend operates on raw strings and binary anyways."),(0,r.kt)("li",{parentName:"ul"},"contracts: ",(0,r.kt)("inlineCode",{parentName:"li"},"reflect")," contract requires ",(0,r.kt)("inlineCode",{parentName:"li"},"stargate")," feature and supports redispatching ",(0,r.kt)("inlineCode",{parentName:"li"},"Stargate")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"IbcMsg::Transfer"),"\nmessages (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/692"},"#692"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: The arithmetic methods of ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," got a huge overhaul, making them more consistent with the bahaviour\nof the Rust primitive types. Thank you\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/yihuang"},"@yihuang")," for bringing this up and for the great implementation. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/853"},"#853"),")",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," got the new functions ",(0,r.kt)("inlineCode",{parentName:"li"},"checked_add"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"checked_sub"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"checked_mul"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"checked_div"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"checked_div_euclid"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"checked_rem"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"wrapping_add"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"wrapping_sub"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"wrapping_mul"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"wrapping_pow"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"saturating_add"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"saturating_sub"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"saturating_mul")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"saturating_pow"),"\nwhich match their equivalent in ",(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/primitive.u128.html"},"u128")," except that instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Option")," the checked methods return a ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," with\nan ",(0,r.kt)("inlineCode",{parentName:"li"},"OverflowError")," or\n",(0,r.kt)("inlineCode",{parentName:"li"},"DivideByZeroError")," that carries a few debug information and can directly be converted to ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult")," by\nusing the ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," operator."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"StdError::Underflow")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::underflow")," were removed in favour of\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::Overflow"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::DivideByZeroError")," was added."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"-")," operator (",(0,r.kt)("inlineCode",{parentName:"li"},"impl ops::Sub<Uint128> for Uint128"),") was removed because it returned a ",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult")," instead of\npanicking in the case of an overflow. This behaviour was inconsistent with ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," and the Rust standard library.\nPlease use the explicit ",(0,r.kt)("inlineCode",{parentName:"li"},"*_sub")," methods introduced above. In a couple of releases from now, we want to introduce\nthe operator again with panicking overflow behaviour (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/858"},"#858"),")."))),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"BankQuery"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingQuery"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmQuery")," query requests (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: In staking query response types ",(0,r.kt)("inlineCode",{parentName:"li"},"Delegation"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"FullDelegation"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"Validator")," the validator address fields were changed from ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"String"),". The new ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr")," type cannot be used here because it only supports standard account addresses\nvia ",(0,r.kt)("inlineCode",{parentName:"li"},"Api::addr_*")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/871"},"#871"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Change address types in ",(0,r.kt)("inlineCode",{parentName:"li"},"BankMsg"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"IbcMsg")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmMsg")," from\n",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"Api::addr_humanize")," now returns ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr"),"\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Hide ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingMsg"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Staking"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"AllDelegationsResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"BondedDenomResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Delegation"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"FullDelegation"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingQuery"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Validator"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidatorsResponse")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"testing::StakingQuerier")," behind the ",(0,r.kt)("inlineCode",{parentName:"li"},"staking")," feature flag to make those only available in contracts built for PoS\nchains."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingMsg::Withdraw")," in favour of\n",(0,r.kt)("inlineCode",{parentName:"li"},"DistributionMsg::SetWithdrawAddress")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"DistributionMsg::WithdrawDelegatorReward")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/848"},"#848"),")."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingQuery::Validators"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidatorsResponse")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierWrapper::query_validators")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingQuery::AllValidators"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"AllValidatorsResponse")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierWrapper.query_all_validators"),". Add\n",(0,r.kt)("inlineCode",{parentName:"li"},"StakingQuery::Validator"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidatorResponse")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierWrapper::query_validator")," to allow querying a single validator.\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/879"},"#879"),")"),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-schema: Make first argument non-mutable in ",(0,r.kt)("inlineCode",{parentName:"li"},"export_schema_with_title"),"\nfor consistency with ",(0,r.kt)("inlineCode",{parentName:"li"},"export_schema"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: The block time in ",(0,r.kt)("inlineCode",{parentName:"li"},"BlockInfo::time")," is now a ",(0,r.kt)("inlineCode",{parentName:"li"},"Timestamp"),".\n",(0,r.kt)("inlineCode",{parentName:"li"},"BlockInfo::time_nanos")," was removed.")),(0,r.kt)("h3",{id:"deprecated"},"Deprecated"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse")," are deprecated in favour of the new ",(0,r.kt)("inlineCode",{parentName:"li"},"Response"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," is deprecated in favour of the new mutable helpers in\n",(0,r.kt)("inlineCode",{parentName:"li"},"Response"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," is not much more than an alias to ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," and it does not provide significant safety\nadvantages. With CosmWasm 0.14, we now use\n",(0,r.kt)("inlineCode",{parentName:"li"},"String")," when there was ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," before. There is also the new ",(0,r.kt)("inlineCode",{parentName:"li"},"Addr"),", which holds a validated immutable human\nreadable address. (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/pull/802"},"#802"),")")),(0,r.kt)("h2",{id:"0132---2021-01-14"},"[0.13.2]"," - 2021-01-14"),(0,r.kt)("h2",{id:"changed-1"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Update Wasmer to 1.0.1.")),(0,r.kt)("h2",{id:"0131---2021-01-12"},"[0.13.1]"," - 2021-01-12"),(0,r.kt)("h3",{id:"added-1"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Add the new ",(0,r.kt)("inlineCode",{parentName:"li"},"#[entry_point]")," macro attribute that serves as an alternative implementation\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std::create_entry_points!(contract)"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std::create_entry_points_with_migration!(contract)"),". Both ways are supported in the 0.13 series.")),(0,r.kt)("h2",{id:"0130--2021-01-06"},"[0.13.0]"," \u2013 2021-01-06"),(0,r.kt)("h2",{id:"added-2"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Extend binary to array support to 64 bytes.")),(0,r.kt)("h2",{id:"changed-2"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all: Drop support for Rust versions lower than 1.47.0."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-std: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std::testing::MockApi::new"),". Use\n",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::default")," instead."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Upgrade Wasmer to 1.0 and adapt all the internal workings accordingly."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Export method ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::Cache::stats")," and response type\n",(0,r.kt)("inlineCode",{parentName:"li"},"Stats"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::testing::MockApi::new"),". Use\n",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::default")," instead."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Convert field ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::api")," to a method."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Change order of generic arguments for consistency in ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"Cache")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Backend")," to always match ",(0,r.kt)("inlineCode",{parentName:"li"},"<A: Api, S: Storage, Q: Querier>"),"."),(0,r.kt)("li",{parentName:"ul"},"cosmwasm-vm: Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::get_memory_size"),". Use ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::memory_pages"),"\ninstead.")),(0,r.kt)("h2",{id:"0121-2020-12-09"},"0.12.1 (2020-12-09)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deprecate ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResult"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResult"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResult")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryResult")," in order to make error type explicit an\nencourage migration to custom errors."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Deref")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierWrapper"),", such that ",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierWrapper")," behaves like a smart pointer to ",(0,r.kt)("inlineCode",{parentName:"li"},"Querier")," allowing\nyou to access ",(0,r.kt)("inlineCode",{parentName:"li"},"Querier")," methods directly.")),(0,r.kt)("h2",{id:"0120-2020-11-19"},"0.12.0 (2020-11-19)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove the previously deprecated ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::Unauthorized"),". Contract specific errors should be implemented using custom\nerror types now (see\n",(0,r.kt)("a",{parentName:"li",href:"/fr/docs/0.16/MIGRATING"},"migration guide")," 0.10 -> 0.11)."),(0,r.kt)("li",{parentName:"ul"},"Use dependency ",(0,r.kt)("inlineCode",{parentName:"li"},"thiserror")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"snafu")," to implement ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError"),". Along with this change, the ",(0,r.kt)("inlineCode",{parentName:"li"},"backtraces"),"\nfeature now requires Rust nightly."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::ParseErr::source")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::ParseErr::source_type")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::SerializeErr::target")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::SerializeErr::target_type")," to work around speacial treatment of the\nfield name ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," in thiserror."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Extern")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Deps")," to unify naming."),(0,r.kt)("li",{parentName:"ul"},"Simplify ownership of calling ",(0,r.kt)("inlineCode",{parentName:"li"},"handle"),", etc. with ",(0,r.kt)("inlineCode",{parentName:"li"},"Deps")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"DepsMut")," struct that just contains references (",(0,r.kt)("inlineCode",{parentName:"li"},"DepsMut"),"\nhas ",(0,r.kt)("inlineCode",{parentName:"li"},"&mut Storage")," otherwise the same)"),(0,r.kt)("li",{parentName:"ul"},"Remove unused ",(0,r.kt)("inlineCode",{parentName:"li"},"Deps::change_querier"),". If you need this or similar functionality, create a new struct with the right\nquerier."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage"),". You can just use ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," everywhere. And use\n",(0,r.kt)("inlineCode",{parentName:"li"},"&Storage")," to provide readonly access. This was only needed to let\n",(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage")," implement the common interface, which is something we don't need.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-storage")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage")," do not implement the\n",(0,r.kt)("inlineCode",{parentName:"li"},"Storage"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage")," traits anymore. If you need nested prefixes, you need to construct them directly\nvia ",(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage::multilevel")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage::multilevel"),"."),(0,r.kt)("li",{parentName:"ul"},"Remove unused ",(0,r.kt)("inlineCode",{parentName:"li"},"TypedStorage"),". If you need this or similar functionality, you probably want to use ",(0,r.kt)("inlineCode",{parentName:"li"},"Bucket"),"\nor ",(0,r.kt)("inlineCode",{parentName:"li"},"Singleton"),". If you really need it, please copy the v0.11 code into your project."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageTransaction")," along with ",(0,r.kt)("inlineCode",{parentName:"li"},"transactional")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"RepLog"),". This has not been used actively for contract\ndevelopment and is now maintained in a contract testing framework.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage::range")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageIterator"),". The storage implementation is now responsible for maintaining iterators\ninternally and make them accessible via the new ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage::scan")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage::next")," methods."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::IteratorDoesNotExist"),". Looking at this, ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError")," should probably be renamed to something that\nincludes before, on and behind the FFI boundary to Go."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MockStorage")," now implementes the new ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," trait and has an additional\n",(0,r.kt)("inlineCode",{parentName:"li"},"MockStorage::all")," for getting all elements of an iterator in tests."),(0,r.kt)("li",{parentName:"ul"},"Remove unused ",(0,r.kt)("inlineCode",{parentName:"li"},"Extern::change_querier"),". If you need this or similar functionality, create a new struct with the right\nquerier."),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::from_code")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache::get_instance")," take options as an\n",(0,r.kt)("inlineCode",{parentName:"li"},"InstanceOptions")," struct. This contains ",(0,r.kt)("inlineCode",{parentName:"li"},"gas_limit")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"print_debug")," for now and can easily be\nextended. ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::testing::mock_instance_options")," can be used for creating such a struct in integration tests."),(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"FileSystemCache")," crate internal. This should be used via ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache"),"."),(0,r.kt)("li",{parentName:"ul"},"Fix return type of ",(0,r.kt)("inlineCode",{parentName:"li"},"FileSystemCache::load")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"VmResult<Option<Module>>")," in order to differentiate missing files from\nerrors."),(0,r.kt)("li",{parentName:"ul"},"Add in-memory caching for recently used Wasm modules."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache")," to just ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::Cache")," and add ",(0,r.kt)("inlineCode",{parentName:"li"},"CacheOptions")," to configure it."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Extern")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Backend"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_backend")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies_with_balances")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_backend_with_balances"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"FfiResult")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"BackendError"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"BackendResult")," and adapt\n",(0,r.kt)("inlineCode",{parentName:"li"},"VmError")," accordingly.")),(0,r.kt)("h2",{id:"0112-2020-10-26"},"0.11.2 (2020-10-26)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<std::str::Utf8Error>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"From<std::string::FromUtf8Error>"),"\nfor ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError"),"."),(0,r.kt)("li",{parentName:"ul"},"Generalize denom argument from ",(0,r.kt)("inlineCode",{parentName:"li"},"&str")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"S: Into<String>")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"coin"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"coins"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"Coin::new"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"PartialEq")," between ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<u8>"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"&[u8]"),"."),(0,r.kt)("li",{parentName:"ul"},"Add missing ",(0,r.kt)("inlineCode",{parentName:"li"},"PartialEq")," implementations between ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"&str"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary::to_array"),", which allows you to copy binary content into a fixed-length ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," array. This is espeically\nuseful for creating integers from binary data.")),(0,r.kt)("h2",{id:"0111-2020-10-12"},"0.11.1 (2020-10-12)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Hash")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Eq")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," to allow using ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"HashSet"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"HashMap"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Hash")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Eq")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr")," to allow using ",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr"),"\nin ",(0,r.kt)("inlineCode",{parentName:"li"},"HashSet")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HashMap"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Add"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"AddAssign")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Sub")," with references on the right hand side for ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Sum<Uint128>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Sum<&'a Uint128>")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128"),".")),(0,r.kt)("h2",{id:"0110-2020-10-08"},"0.11.0 (2020-10-08)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"all")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drop support for Rust versions lower than 1.45.2."),(0,r.kt)("li",{parentName:"ul"},"The serialization of the result from ",(0,r.kt)("inlineCode",{parentName:"li"},"init"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"migrate"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"handle"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"query")," changed in an incompatible way. See the\nnew ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractResult")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SystemResult")," types and their documentation."),(0,r.kt)("li",{parentName:"ul"},"Pass ",(0,r.kt)("inlineCode",{parentName:"li"},"Env")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," as well. As this doesn't have ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo"),", we removed ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageInfo")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"Env")," and pass that\nas a separate argument to\n",(0,r.kt)("inlineCode",{parentName:"li"},"init"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"handle"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),". See the example\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/blob/master/README.md#implementing-the-smart-contract"},"type definitions in the README"),"\nto see how to update your contract exports (just add one extra arg each).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"time_nanos")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"BlockInfo")," allowing access to high precision block times."),(0,r.kt)("li",{parentName:"ul"},"Change ",(0,r.kt)("inlineCode",{parentName:"li"},"FullDelegation::accumulated_rewards")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"Coin")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<Coin>"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse::log"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse::log")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse::log"),"\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse::attributes"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MigrateResponse::attributes")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse::attributes"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"LogAttribute")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Attribute"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"log")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"attr"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Context::add_log")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Context::add_attribute"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Api::debug")," for emitting debug messages during development."),(0,r.kt)("li",{parentName:"ul"},"Fix error type for response parsing errors in ",(0,r.kt)("inlineCode",{parentName:"li"},"ExternalQuerier::raw_query"),". This was ",(0,r.kt)("inlineCode",{parentName:"li"},"Ok(Err(StdError::ParseErr))"),"\ninstead of\n",(0,r.kt)("inlineCode",{parentName:"li"},"Err(SystemError::InvalidResponse)"),", implying an error created in the target contract."),(0,r.kt)("li",{parentName:"ul"},"Deprecate ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::Unauthorized")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::unauthorized")," in favour of custom errors. From now on ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError"),"\nshould only be created by the standard library and should only contain cases the standard library needs."),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"impl Display for CanonicalAddr")," use upper case hex instead of base64. This also\naffects ",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr::to_string"),"."),(0,r.kt)("li",{parentName:"ul"},"Create trait ",(0,r.kt)("inlineCode",{parentName:"li"},"CustomQuery")," for the generic argument in\n",(0,r.kt)("inlineCode",{parentName:"li"},"QueryRequest<C: CustomQuery>"),". This allows us to provide\n",(0,r.kt)("inlineCode",{parentName:"li"},"impl<C: CustomQuery> From<C> for QueryRequest<C>")," for any custom query."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Binary> for Vec<u8>"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<CanonicalAddr> for Vec<u8>"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary::into_vec")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr::into_vec"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"canonical_length")," argument was removed from ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies_with_balances"),". In the now deprecated ",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::new"),", the argument is unused. Contracts should not\nneed to set this value and usually should not make assumptions about the value."),(0,r.kt)("li",{parentName:"ul"},"The canonical address encoding in ",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::canonical_address")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::human_address")," was changed to an unpredicatable represenation of non-standard length that aims to destroy\nmost of the input structure.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-storage")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change order of arguments such that ",(0,r.kt)("inlineCode",{parentName:"li"},"storage")," is always first followed by namespace in ",(0,r.kt)("inlineCode",{parentName:"li"},"Bucket::new"),"\n, ",(0,r.kt)("inlineCode",{parentName:"li"},"Bucket::multilevel"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyBucket::new"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyBucket::multilevel"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"bucket")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"bucket_read"),"."),(0,r.kt)("li",{parentName:"ul"},"Change order of arguments such that ",(0,r.kt)("inlineCode",{parentName:"li"},"storage")," is always first followed by namespace in ",(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage::new"),"\n, ",(0,r.kt)("inlineCode",{parentName:"li"},"PrefixedStorage::multilevel"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage::new"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyPrefixedStorage::multilevel"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"prefixed")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"prefixed_read"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache::new"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::from_code")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::from_module")," now take an additional argument to enable/disable\nprinting debug logs from contracts."),(0,r.kt)("li",{parentName:"ul"},"Bump required export ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_3")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_4"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"canonical_length")," argument was removed from ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"mock_dependencies_with_balances")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::new_failing"),". In the now deprecated ",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::new"),", the argument is\nunused. Contracts should not need to set this value and usually should not make assumptions about the value."),(0,r.kt)("li",{parentName:"ul"},"The canonical address encoding in ",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::canonical_address")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"MockApi::human_address")," was changed to an unpredicatable represenation of non-standard length that aims to destroy\nmost of the input structure.")),(0,r.kt)("h2",{id:"0101-2020-08-25"},"0.10.1 (2020-08-25)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fix bug where ",(0,r.kt)("inlineCode",{parentName:"li"},"ExternalStorage.range()")," would cause VM error if either lower or upper bound was set\n(",(0,r.kt)("a",{parentName:"li",href:"https://github.com/CosmWasm/cosmwasm/issues/508"},"#508"),")")),(0,r.kt)("h2",{id:"0100-2020-07-30"},"0.10.0 (2020-07-30)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"all")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drop support for Rust versions lower than 1.44.1.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove error helpers ",(0,r.kt)("inlineCode",{parentName:"li"},"generic_err"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"invalid_base64"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"invalid_utf8"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"not_found"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"parse_err"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"serialize_err"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"underflow"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"unauthorized")," in favour of ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::generic_err")," and\nfriends."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<&[u8; $N]> for Binary")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"From<[u8; $N]> for Binary")," for all\n",(0,r.kt)("inlineCode",{parentName:"li"},"$N <= 32"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," object that can be used to build Init/Handle/Migrate response via ",(0,r.kt)("inlineCode",{parentName:"li"},"add_log"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"add_message"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"set_data"),"\nand then convert to the proper type via ",(0,r.kt)("inlineCode",{parentName:"li"},"into")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"try_into"),". Option to simplify response construction."),(0,r.kt)("li",{parentName:"ul"},"Env uses ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"message.sender")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"contract_address")),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Api")," argument from ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_env")),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"From<&[u8]>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Vec<u8>>")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"CanonicalAddr"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove unused cache size argument from ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set_gas_limit")," now panics if the given gas limit exceeds the max. supported value."),(0,r.kt)("li",{parentName:"ul"},"Increase the max. supported value for gas limit from 10_000_000_000 to 0x7FFFFFFFFFFFFFFF."),(0,r.kt)("li",{parentName:"ul"},"Add checks to ",(0,r.kt)("inlineCode",{parentName:"li"},"get_region")," for failing early when the contract sends a Region pointer to the VM that is not backed by\na plausible Region. This helps development of standard libraries."),(0,r.kt)("li",{parentName:"ul"},"Create dedicated ",(0,r.kt)("inlineCode",{parentName:"li"},"RegionValidationError")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"RegionValidationResult"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Api::human_address")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Api::canonical_address")," now return a pair of return data and gas usage."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"NextItem")," in favour of a more advanced ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiResult<T>"),", which is used to store the return result and the gas\ninformation consistently across all APIs. ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiResult<T>")," was changed to ",(0,r.kt)("inlineCode",{parentName:"li"},"(Result<T, FfiError>, GasInfo)"),"."),(0,r.kt)("li",{parentName:"ul"},"Create error type ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::InvalidUtf8")," for the cases where the backend sends invalid UTF-8 in places that expect\nstrings."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::Other")," in favour of ",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::UserErr")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::Unknown"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"canonicalize_address")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"humanize_address")," imports now report user errors to the contract."),(0,r.kt)("li",{parentName:"ul"},"Bump ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_2")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_3"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Querier::raw_query")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"QuerierResult")," were removed in favour of the new\n",(0,r.kt)("inlineCode",{parentName:"li"},"Querier::query_raw"),", which includes a gas limit parameter for the query.")),(0,r.kt)("h2",{id:"094-2020-07-16"},"0.9.4 (2020-07-16)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::create_gas_report")," returning a gas report including the original limit, the remaining gas and the\ninternally/externally used gas.")),(0,r.kt)("h2",{id:"093-2020-07-08"},"0.9.3 (2020-07-08)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-storage")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},".remove()")," method to ",(0,r.kt)("inlineCode",{parentName:"li"},"Bucket")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Singleton"),".")),(0,r.kt)("h2",{id:"092-2020-06-29"},"0.9.2 (2020-06-29)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Downgrade wasmer to 0.17.0.")),(0,r.kt)("h2",{id:"091-2020-06-25"},"0.9.1 (2020-06-25)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replace type ",(0,r.kt)("inlineCode",{parentName:"li"},"Never")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"Empty")," because enums with no cases cannot be expressed in valid JSON Schema.")),(0,r.kt)("h2",{id:"090-2020-06-25"},"0.9.0 (2020-06-25)"),(0,r.kt)("p",null,"Note: this version contains an API bug and should not be used (see\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm/issues/451"},"https://github.com/CosmWasm/cosmwasm/issues/451"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"all")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Upgrade wasmer to 0.17.1."),(0,r.kt)("li",{parentName:"ul"},"Drop support for Rust versions lower than 1.43.1")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage::get")," and all its implementations now return\n",(0,r.kt)("inlineCode",{parentName:"li"},"Option<Vec<u8>>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage::range")," and all its implementations now always succeed and return an iterator instead of a result.\nThis is now an iterator over\n",(0,r.kt)("inlineCode",{parentName:"li"},"Option<KV>")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Option<StdResult<KV>>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Storage::{set, remove}")," and all their implementations no longer have a return value. Previously they\nreturned ",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult<()>"),"."),(0,r.kt)("li",{parentName:"ul"},"Trait ",(0,r.kt)("inlineCode",{parentName:"li"},"Querier")," is not ",(0,r.kt)("inlineCode",{parentName:"li"},"Clone")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Send")," anymore."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consume_region")," panics on null pointers and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<u8>")," instead of\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult<Vec<u8>>"),"."),(0,r.kt)("li",{parentName:"ul"},"Added contract migration mechanism. Contracts can now optionally export a\n",(0,r.kt)("inlineCode",{parentName:"li"},"migrate")," function with the following definition:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'extern "C" fn migrate(env_ptr: u32, msg_ptr: u32) -> u32;\n'))),(0,r.kt)("li",{parentName:"ul"},"InitResponse no longer has a data field. We always return the contract address in the data field in the blockchain and\ndon't allow you to override. ",(0,r.kt)("inlineCode",{parentName:"li"},"handle"),"\ncan still make use of the field."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"MockQuerier::with_staking")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"MockQuerier::update_staking")," to match\n",(0,r.kt)("inlineCode",{parentName:"li"},"::update_balance"),"."),(0,r.kt)("li",{parentName:"ul"},"The obsolete ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::NullPointer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"null_pointer")," were removed."),(0,r.kt)("li",{parentName:"ul"},"Error creator functions are now in type itself, e.g.\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::invalid_base64")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"invalid_base64"),". The free functions are deprecated and will be removed before\n1.0.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-storage")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"transactional_deps"),". Use ",(0,r.kt)("inlineCode",{parentName:"li"},"transactional")," that just provides a transactional storage instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"get_with_prefix")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"Option<Vec<u8>>")," instead of\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult<Option<Vec<u8>>>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set_with_prefix")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"remove_with_prefix")," return nothing instead of\n",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult<()>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RepLog::commit")," no longer returns any value (always succeeds)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Op::apply")," no longer returns any value (always succeeds).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The export ",(0,r.kt)("inlineCode",{parentName:"li"},"allocate")," must not return 0 as a valid address. The contract is responsible for avoiding this offset in\nthe linear memory."),(0,r.kt)("li",{parentName:"ul"},"The import ",(0,r.kt)("inlineCode",{parentName:"li"},"db_read")," now allocates memory for the return value as part of the call and returns a pointer to the value\nas ",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),". The return value 0 means\n",(0,r.kt)("em",{parentName:"li"},"key does not exist"),"."),(0,r.kt)("li",{parentName:"ul"},"The import ",(0,r.kt)("inlineCode",{parentName:"li"},"db_next")," now allocates a memory region for the return key and value as part of the call and returns a\npointer to the region as ",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),". The data in the region is stored in the format ",(0,r.kt)("inlineCode",{parentName:"li"},"value || key || keylen"),". As before, an\nempty key means ",(0,r.kt)("em",{parentName:"li"},"no more value"),"."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::get_gas")," in favour of ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::get_gas_left"),"."),(0,r.kt)("li",{parentName:"ul"},"All calls from the VM layer to the chain layer also return the amount of gas used on success. (This is represented by\nreplacing the return value with\n",(0,r.kt)("inlineCode",{parentName:"li"},"(value, used_gas)"),"). Gas usage across the system is then tracked in the VM layer, which allows us to halt the\ncontract during an import, as soon as we can prove that we used all allocated gas."),(0,r.kt)("li",{parentName:"ul"},"Remove instance caching, which is disabled since 0.8.1 as it is not stable. Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache::store_instance"),"; you\ncan not call ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::recylce"),"\ndirectly to get back the external dependencies."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"MockQuerier::with_staking")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"MockQuerier::update_staking")," to match\n",(0,r.kt)("inlineCode",{parentName:"li"},"::update_balance"),"."),(0,r.kt)("li",{parentName:"ul"},"Instead of panicking, ",(0,r.kt)("inlineCode",{parentName:"li"},"read_region"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"write_region"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"get_region"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"set_region"),"\nnow return a new ",(0,r.kt)("inlineCode",{parentName:"li"},"CommunicationError::DerefErr")," when dereferencing a pointer provided by the contract fails."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::set_message")," was removed because errors should be immutable. Use\n",(0,r.kt)("inlineCode",{parentName:"li"},"FfiError::other")," to create an error with the desired error message."),(0,r.kt)("li",{parentName:"ul"},"The import implementation of ",(0,r.kt)("inlineCode",{parentName:"li"},"db_scan")," now errors instead of returning an error code for an invalid order value. The\nreturn type was changed to ",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),"."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageIteratorItem")," in favour of the new types ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageIterator")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"NextItem"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageIterator")," is a custom iterator type that does not implement Rust's ",(0,r.kt)("inlineCode",{parentName:"li"},"Iterator")," trait, allowing it\nto communicate the used gas value of the last ",(0,r.kt)("inlineCode",{parentName:"li"},"next")," call to the VM."),(0,r.kt)("li",{parentName:"ul"},"Don't report any ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError")," back to the contract in ",(0,r.kt)("inlineCode",{parentName:"li"},"canonicalize_address")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"humanize_address"),". Only invalid inputs should be reported."),(0,r.kt)("li",{parentName:"ul"},"Move error cases ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionLengthTooBig")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionTooSmall"),"\ninto ",(0,r.kt)("inlineCode",{parentName:"li"},"CommunicationError"),"."),(0,r.kt)("li",{parentName:"ul"},"In the ",(0,r.kt)("inlineCode",{parentName:"li"},"canonicalize_address")," inplementation, invalid UTF-8 inputs now result in ",(0,r.kt)("inlineCode",{parentName:"li"},"CommunicationError::InvalidUtf8"),",\nwhich is not reported back to the contract. A standard library should ensure this never happens by correctly encoding\nstring input values."),(0,r.kt)("li",{parentName:"ul"},"Merge trait ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage"),"."),(0,r.kt)("li",{parentName:"ul"},"The imports ",(0,r.kt)("inlineCode",{parentName:"li"},"canonicalize_address")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"humanize_address")," now return a memory address to an error ",(0,r.kt)("inlineCode",{parentName:"li"},"Region"),". If this\naddress is 0, the call succeeded."),(0,r.kt)("li",{parentName:"ul"},"Bump ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_1")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_2"),".")),(0,r.kt)("h2",{id:"081-2020-06-08"},"0.8.1 (2020-06-08)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The arguments of ",(0,r.kt)("inlineCode",{parentName:"li"},"log")," changed from ",(0,r.kt)("inlineCode",{parentName:"li"},"&str")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"ToString"),", allowing to pass various types like ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HumanAddr"),"\n, ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," or primitive integers directly."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"From<Vec<u8>>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Into<Vec<u8>>")," implementations for ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," for zero-copy conversions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deprecated ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::get_gas")," in favour of ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::get_gas_left"),". The old method will remain available for a while\nbut will issue a deprecation warning when used."),(0,r.kt)("li",{parentName:"ul"},"Disable instance caching by treating every cache size as 0. Instance caching is not safe as the same Wasm memory is\nreused across multiple executions."),(0,r.kt)("li",{parentName:"ul"},"The storage of an ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance")," can now be set into readonly mode, which is checked by the writing storage\nimports ",(0,r.kt)("inlineCode",{parentName:"li"},"db_write")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"db_remove"),". Read-only mode is off by default for backwards compatibility. ",(0,r.kt)("inlineCode",{parentName:"li"},"call_query_raw")," now\nsets the instance's storage to readonly."),(0,r.kt)("li",{parentName:"ul"},"The new error case ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::WriteAccessDenied")," is returned when a contract calls an import that potentially writes to\nstorage during a query.")),(0,r.kt)("h2",{id:"080-2020-05-25"},"0.8.0 (2020-05-25)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"all")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Upgrade schemars to 0.7."),(0,r.kt)("li",{parentName:"ul"},"Upgrade wasmer to 0.17."),(0,r.kt)("li",{parentName:"ul"},"Update snafu to 0.6."),(0,r.kt)("li",{parentName:"ul"},"Minimal supported Rust version is 1.41."),(0,r.kt)("li",{parentName:"ul"},"Split ",(0,r.kt)("inlineCode",{parentName:"li"},"Region.len")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"Region.capacity")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Region.length"),", where the new capacity is the number of bytes available\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"length")," is the number of bytes used. This is a breaking change in the contract-vm interface, which requires the\nsame memory layout of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Region")," struct on both sides."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"remove")," method to ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," trait."),(0,r.kt)("li",{parentName:"ul"},"(feature-flagged) Add ",(0,r.kt)("inlineCode",{parentName:"li"},"range")," method to ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadonlyStorage")," trait. This returns an iterator that covers all or a subset\nof the items in the db ordered ascending or descending by key."),(0,r.kt)("li",{parentName:"ul"},"Add new feature flag ",(0,r.kt)("inlineCode",{parentName:"li"},"iterator")," to both packages to enable ",(0,r.kt)("inlineCode",{parentName:"li"},"range"),"\nfunctionality. This is used to allow potential porting to chains that use Merkle Tries (which don't allow iterating\nover ranges)."),(0,r.kt)("li",{parentName:"ul"},"All serialized JSON types now use snake_case mappings for names. This means enum fields like ",(0,r.kt)("inlineCode",{parentName:"li"},"ChangeOwner")," will map\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"change_owner")," in the underlying JSON, not ",(0,r.kt)("inlineCode",{parentName:"li"},"changeowner"),". This is a breaking change for the clients."),(0,r.kt)("li",{parentName:"ul"},"Public interface between contract and runtime no longer uses ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," to represent an error, but rather\nserializes ",(0,r.kt)("inlineCode",{parentName:"li"},"ApiError")," as a rich JSON error."),(0,r.kt)("li",{parentName:"ul"},"Return value from ",(0,r.kt)("inlineCode",{parentName:"li"},"env.write_db")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"env.remove_db")," to allow error reporting."),(0,r.kt)("li",{parentName:"ul"},"Query responses are now required to contain valid JSON."),(0,r.kt)("li",{parentName:"ul"},"Renamed all ",(0,r.kt)("inlineCode",{parentName:"li"},"*_db")," wasm imports to ",(0,r.kt)("inlineCode",{parentName:"li"},"db_*")),(0,r.kt)("li",{parentName:"ul"},"Merge ",(0,r.kt)("inlineCode",{parentName:"li"},"cw-storage")," repo as subpackage, now ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-storage")),(0,r.kt)("li",{parentName:"ul"},"Add iterator support to ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-storage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Coin.amount")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"Uint128")," rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),". Uint128 serializes as a string in JSON, but parses into a u128\ndata in memory. It also has some operator overloads to allow easy math operations on ",(0,r.kt)("inlineCode",{parentName:"li"},"Coin")," types, as well as\nenforcing valid amounts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Env")," no longer has a ",(0,r.kt)("inlineCode",{parentName:"li"},"contract.balance")," element. If you need this info, please use the ",(0,r.kt)("inlineCode",{parentName:"li"},"Querier")," to get this info. As\nof Cosmos-SDK 0.39 this needs extra storage queries to get the balance, so we only do those queries when needed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Env.message.sent_funds")," is a ",(0,r.kt)("inlineCode",{parentName:"li"},"Vec<Coin>")," not ",(0,r.kt)("inlineCode",{parentName:"li"},"Option<Vec<Coin>>"),". We will normalize the go response in ",(0,r.kt)("inlineCode",{parentName:"li"},"go-cosmwasm"),"\nbefore sending it to the contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Env.message.signer")," was renamed to ",(0,r.kt)("inlineCode",{parentName:"li"},"Env.message.sender"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Env.block.{height,time}")," are now ",(0,r.kt)("inlineCode",{parentName:"li"},"u64")," rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"i64"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-schema")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This new crate now contains the implementations for generating JSON Schema files from interface types. It exposes the\nfunctions ",(0,r.kt)("inlineCode",{parentName:"li"},"export_schema"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"export_schema_with_title"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"schema_for"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-std")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make all symbols from ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::memory")," crate internal, as those symbols are not needed by users of the library."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::mock::dependencies")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::mock::mock_dependencies"),"\nto differentiate between testing and production ",(0,r.kt)("inlineCode",{parentName:"li"},"External"),"."),(0,r.kt)("li",{parentName:"ul"},"Export all symbols from ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::mock")," as the new non-wasm32 module\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::testing"),". Export all remaining symbols at top level (e.g.\n",(0,r.kt)("inlineCode",{parentName:"li"},"use cosmwasm::traits::{Api, Storage};")," + ",(0,r.kt)("inlineCode",{parentName:"li"},"use cosmwasm::encoding::Binary;"),"\nbecomes ",(0,r.kt)("inlineCode",{parentName:"li"},"use cosmwasm::{Api, Binary, Storage};"),")."),(0,r.kt)("li",{parentName:"ul"},"Rename package ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-std"),"."),(0,r.kt)("li",{parentName:"ul"},"The export ",(0,r.kt)("inlineCode",{parentName:"li"},"allocate")," does not zero-fill the allocated memory anymore."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"remove_db")," to the required imports of a contract."),(0,r.kt)("li",{parentName:"ul"},"(feature-flagged) add ",(0,r.kt)("inlineCode",{parentName:"li"},"scan_db")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"next_db")," callbacks from wasm contract to VM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"serde::{from_slice, to_vec}")," return ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std::Result"),", no more need to use ",(0,r.kt)("inlineCode",{parentName:"li"},".context(...)")," when calling these\nfunctions"),(0,r.kt)("li",{parentName:"ul"},"Split ",(0,r.kt)("inlineCode",{parentName:"li"},"Response")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse"),"; split\n",(0,r.kt)("inlineCode",{parentName:"li"},"ContractResult")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResult")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResult"),"."),(0,r.kt)("li",{parentName:"ul"},"Create explicit ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryResponse"),", analogue to ",(0,r.kt)("inlineCode",{parentName:"li"},"InitResponse")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"HandleResponse"),"."),(0,r.kt)("li",{parentName:"ul"},"The exports ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"allocate")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"deallocate")," are now private and can only be called via the Wasm\nexport. Make sure to ",(0,r.kt)("inlineCode",{parentName:"li"},"use"),(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std")," at least once in the contract to pull in the C exports."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Querier")," trait and ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryRequest")," for query callbacks from the contract, along with ",(0,r.kt)("inlineCode",{parentName:"li"},"SystemError")," type for the\nruntime rejecting messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"QueryRequest")," takes a generic ",(0,r.kt)("inlineCode",{parentName:"li"},"Custom(T)")," type that is passed opaquely to the end consumer (",(0,r.kt)("inlineCode",{parentName:"li"},"wasmd")," or integration\ntest stubs), allowing custom queries to native code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{Init,Handle,Query}Result")," are now just aliases for a concrete ",(0,r.kt)("inlineCode",{parentName:"li"},"ApiResult"),"\ntype."),(0,r.kt)("li",{parentName:"ul"},"Support results up to 128 KiB in ",(0,r.kt)("inlineCode",{parentName:"li"},"ExternalStorage.get"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," trait's ",(0,r.kt)("inlineCode",{parentName:"li"},".get"),", ",(0,r.kt)("inlineCode",{parentName:"li"},".set")," and ",(0,r.kt)("inlineCode",{parentName:"li"},".remove")," now return a ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," to allow propagation of errors."),(0,r.kt)("li",{parentName:"ul"},"Move ",(0,r.kt)("inlineCode",{parentName:"li"},"transactional"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"transactional_deps"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"RepLog"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageTransaction"),"\ninto crate ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-storage"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult")," to differentiate between the auto-",(0,r.kt)("inlineCode",{parentName:"li"},"use"),"d\n",(0,r.kt)("inlineCode",{parentName:"li"},"core::result::Result"),". Fix error argument to ",(0,r.kt)("inlineCode",{parentName:"li"},"Error"),"."),(0,r.kt)("li",{parentName:"ul"},"Complete overhaul of ",(0,r.kt)("inlineCode",{parentName:"li"},"Error")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError")," enum can now be serialized and deserialized (losing its backtrace), which allows us to pass them over\nthe Wasm/VM boundary. This allows using fully structured errors in e.g. integration tests."),(0,r.kt)("li",{parentName:"ul"},"Auto generated snafu error constructor structs like ",(0,r.kt)("inlineCode",{parentName:"li"},"NotFound"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"ParseErr"),"/\u2026 have been intenalized in favour of error\ngeneration helpers like\n",(0,r.kt)("inlineCode",{parentName:"li"},"not_found"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"parse_err"),"/\u2026"),(0,r.kt)("li",{parentName:"ul"},"All error generator functions now return errors instead of results."),(0,r.kt)("li",{parentName:"ul"},"Error cases don't contain ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," fields anymore. Instead source errors are converted to standard types\nlike ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),". For this reason, both\n",(0,r.kt)("inlineCode",{parentName:"li"},"snafu::ResultExt")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"snafu::OptionExt")," cannot be used anymore."),(0,r.kt)("li",{parentName:"ul"},"Backtraces became optional. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"RUST_BACKTRACE=1")," to enable them."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Utf8Err"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"Utf8StringErr")," merged into ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::InvalidUtf8")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Base64Err")," renamed into ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::InvalidBase64")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ContractErr"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"DynContractErr")," merged into ",(0,r.kt)("inlineCode",{parentName:"li"},"StdError::GeneralErr")),(0,r.kt)("li",{parentName:"ul"},"The unused ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidationErr")," was removed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StdError")," is now\n",(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/1.35.0/unstable-book/language-features/non-exhaustive.html"},"non_exhaustive"),", making new\nerror cases non-breaking changes."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ExternalStorage.get")," now returns an empty vector if a storage entry exists but has an empty value. Before, this was\nnormalized to ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,r.kt)("li",{parentName:"ul"},"Reorganize ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg")," enum types. They are now split by modules:\n",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Bank(BankMsg)"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Custom(T)"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg::Wasm(WasmMsg)")),(0,r.kt)("li",{parentName:"ul"},"CosmosMsg is now generic over the content of ",(0,r.kt)("inlineCode",{parentName:"li"},"Custom")," variant. This allows blockchains to support custom native calls\nin their Cosmos-SDK apps and developers to make use of them in CosmWasm apps without forking the\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm-vm")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"go-cosmwasm")," runtime."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"staking")," feature flag to expose new ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingMsg")," types under ",(0,r.kt)("inlineCode",{parentName:"li"},"CosmosMsg"),"\nand new ",(0,r.kt)("inlineCode",{parentName:"li"},"StakingRequest")," types under ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryRequest"),"."),(0,r.kt)("li",{parentName:"ul"},"Add support for mocking-out staking queries via ",(0,r.kt)("inlineCode",{parentName:"li"},"MockQuerier.with_staking")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"from_slice"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"from_binary")," now require result type to be ",(0,r.kt)("inlineCode",{parentName:"li"},"DeserializeOwned"),", i.e. the result must not contain\nreferences such as ",(0,r.kt)("inlineCode",{parentName:"li"},"&str"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm-vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance.memory"),"/",(0,r.kt)("inlineCode",{parentName:"li"},".allocate"),"/",(0,r.kt)("inlineCode",{parentName:"li"},".deallocate"),"/",(0,r.kt)("inlineCode",{parentName:"li"},".func")," crate internal. A user of the VM must not access the\ninstance's memory directly."),(0,r.kt)("li",{parentName:"ul"},"The imports ",(0,r.kt)("inlineCode",{parentName:"li"},"env.canonicalize_address"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"env.humanize_address")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"env.read_db")," don't return the number of bytes written anymore. This value is now available in the resulting regions.\nNegative return values are errors, 0 is success and values greater than 0 are reserved for future use."),(0,r.kt)("li",{parentName:"ul"},"Change the required interface version guard export from ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_api_0_6")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm_version_1"),"."),(0,r.kt)("li",{parentName:"ul"},"Provide implementations for ",(0,r.kt)("inlineCode",{parentName:"li"},"remove_db")," and (feature-flagged) ",(0,r.kt)("inlineCode",{parentName:"li"},"scan_db")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"next_db")),(0,r.kt)("li",{parentName:"ul"},"Provide custom ",(0,r.kt)("inlineCode",{parentName:"li"},"serde::{from_slice, to_vec}")," implementation separate from\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_std"),", so we can return cosmwasm-vm specific ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," (only used internally)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"call_{init,handle,query}")," and the ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::testing")," wrappers return standard ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," types now,\neg. ",(0,r.kt)("inlineCode",{parentName:"li"},"Result<HandleResponse, ApiError>"),"."),(0,r.kt)("li",{parentName:"ul"},"Add length limit when reading memory from the instance to protect against malicious contracts creating overly\nlarge ",(0,r.kt)("inlineCode",{parentName:"li"},"Region"),"s."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance.get_memory_size"),", giving you the peak memory consumption of an instance."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::errors::CacheExt"),"."),(0,r.kt)("li",{parentName:"ul"},"Move ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::errors::{Error, Result}")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::{VmError, VmResult}")," and remove generic error type from result."),(0,r.kt)("li",{parentName:"ul"},"The import ",(0,r.kt)("inlineCode",{parentName:"li"},"db_read")," now returns an error code if the storage key does not exist. The latest standard library converts\nthis error code back to a ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),"\nvalue. This allows differentiating non-existent and empty storage entries."),(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance::from_module"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"::from_wasmer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"::recycle")," crate-internal."),(0,r.kt)("li",{parentName:"ul"},"Create explicit, public ",(0,r.kt)("inlineCode",{parentName:"li"},"Checksum")," type to identify Wasm blobs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CosmCache::new")," now takes supported features as an argument."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionTooSmallErr")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionTooSmall"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionLengthTooBigErr")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RegionLengthTooBig"),"."),(0,r.kt)("li",{parentName:"ul"},"Change property types to owned string in ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::UninitializedContextData"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::ConversionErr"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::ParseErr")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::SerializeErr"),"."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::IoErr")," in favour of ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::CacheErr"),"."),(0,r.kt)("li",{parentName:"ul"},"Simplify ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::CompileErr"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::ResolveErr")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::WasmerRuntimeErr")," to just hold a string with the details instead of the source error."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::WasmerErr")," in favour of the new ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::InstantiationErr"),"."),(0,r.kt)("li",{parentName:"ul"},"The snafu error builders from ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError")," are now private, i.e. callers can only use the errors, not create them."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VmError")," is now ",(0,r.kt)("inlineCode",{parentName:"li"},"#[non_exhaustive]"),"."),(0,r.kt)("li",{parentName:"ul"},"Split ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RuntimeErr")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::BackendErr")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::GenericErr"),"; rename ",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::WasmerRuntimeErr")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"VmError::RuntimeErr"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance.with_querier")," analogue to ",(0,r.kt)("inlineCode",{parentName:"li"},"Instance.with_storage"),".")),(0,r.kt)("h2",{id:"072-2020-03-23"},"0.7.2 (2020-03-23)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fix JSON schema type of ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," from int array (wrong) to string (right)."),(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"Extern")," not ",(0,r.kt)("inlineCode",{parentName:"li"},"Clone"),"able anymore. Before cloning led to copying the data for mock storage and copying a stateless\nbridge for the external storage, which are different semantics."),(0,r.kt)("li",{parentName:"ul"},"Remove public ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm::imports::dependencies"),". A user of this library does not need to call this explicitely.\nDependencies are created internally and passed as an argument in ",(0,r.kt)("inlineCode",{parentName:"li"},"exports::do_init"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"exports::do_handle")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"exports::do_query"),"."),(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"ExternalStorage")," not ",(0,r.kt)("inlineCode",{parentName:"li"},"Clone"),"able anymore. This does not copy any data, so a clone could lead to unexpected\nresults.")),(0,r.kt)("h2",{id:"071-2020-03-11"},"0.7.1 (2020-03-11)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm_vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Avoid unnecessary panic when checking corrupted wasm file."),(0,r.kt)("li",{parentName:"ul"},"Support saving the same wasm to cache multiple times.")),(0,r.kt)("h2",{id:"070-2020-02-26"},"0.7.0 (2020-02-26)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Slice")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Region")," to simplify differentiation between Wasm memory region and serde's ",(0,r.kt)("inlineCode",{parentName:"li"},"from_slice")),(0,r.kt)("li",{parentName:"ul"},"Rename ",(0,r.kt)("inlineCode",{parentName:"li"},"Params")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Env"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_params")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"mock_env")," for clearer naming (this is information on the execution\nenvironment)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Response.log")," is not a vector of key/value pairs that can later be indexed by Tendermint.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"cosmwasm_vm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove export ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::read_memory"),". Using this indicates an architectural flaw, since this is a method for host\nto guest communication inside the VM and not needed for users of the VM."),(0,r.kt)("li",{parentName:"ul"},"Create new type ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm:errors::Error::RegionTooSmallErr"),"."),(0,r.kt)("li",{parentName:"ul"},"Change return type of ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::write_memory")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Result<usize, Error>")," to make it harder to forget handling\nerrors."),(0,r.kt)("li",{parentName:"ul"},"Fix missing error propagation in ",(0,r.kt)("inlineCode",{parentName:"li"},"do_canonical_address"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"do_human_address"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"allocate"),"."),(0,r.kt)("li",{parentName:"ul"},"Update error return codes in import ",(0,r.kt)("inlineCode",{parentName:"li"},"c_read"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename imports ",(0,r.kt)("inlineCode",{parentName:"li"},"c_read"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"c_write")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"read_db"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"write_db"),"."),(0,r.kt)("li",{parentName:"ul"},"Rename imports ",(0,r.kt)("inlineCode",{parentName:"li"},"c_canonical_address"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"c_human_address")," to\n",(0,r.kt)("inlineCode",{parentName:"li"},"canonicalize_address"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"humanize_address"),"."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::testing::test_io")," for basic memory allocation/deallocation testing between host and guest."),(0,r.kt)("li",{parentName:"ul"},"Make ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidationErr.msg")," a dynamic ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," including relevant runtime information."),(0,r.kt)("li",{parentName:"ul"},"Remove export ",(0,r.kt)("inlineCode",{parentName:"li"},"check_api_compatibility"),". The VM will take care of calling it."),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"check_api_compatibility")," check imports by fully qualified identifier\n",(0,r.kt)("inlineCode",{parentName:"li"},"<module>.<name>"),"."),(0,r.kt)("li",{parentName:"ul"},"Make gas limit immutable in ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::instance::Instance"),". It is passed once at construction time and cannot\npublicly be manipulated anymore."),(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"take_storage"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"leave_storage")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"cosmwasm_vm::Instance"),".")),(0,r.kt)("h2",{id:"06"},"0.6"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/confio/cosmwasm/issues/73"},"Define canonical address callbacks")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"&[u8]")," for addresses in params")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Allow contracts to resolve human readable addresses (",(0,r.kt)("inlineCode",{parentName:"p"},"&str"),") in their json into a fixed-size binary representation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Provide mocks for unit testing and integration tests")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Separate out ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadOnlyStorage")," as separate traits"))),(0,r.kt)("h2",{id:"05"},"0.5"),(0,r.kt)("h3",{id:"052"},"0.5.2"),(0,r.kt)("p",null,"This is the first documented and supported implementation. It contains the basic feature set. ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"handle"),"\nsupported for modules and can return messages. A stub implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," is done, which is likely to be\ndeprecated soon. Some main points:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The build-system and unit/integration-test setup is all stabilized."),(0,r.kt)("li",{parentName:"ul"},"Cosmwasm-vm supports singlepass and cranelift backends, and caches modules on disk and instances in memory (lru cache)\n."),(0,r.kt)("li",{parentName:"ul"},"JSON Schema output works")),(0,r.kt)("p",null,"All future Changelog entries will reference this base"))}k.isMDXComponent=!0}}]);